/**
 * @file puddle/puddle.hpp
 * @brief An alternate compile-time layer for the Mirror library.
 * NOTE: The Mirror's headers (including the registering headers)
 * should be included before this file.
 *
 *  Copyright 2008-2011 Matus Chochlik. Distributed under the Boost
 *  Software License, Version 1.0. (See accompanying file
 *  LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)
 */

#ifndef PUDDLE_PUDDLE_1103151324_HPP
#define PUDDLE_PUDDLE_1103151324_HPP

#include <puddle/config.hpp>
#include <puddle/categories.hpp>
#include <puddle/specifiers.hpp>
#include <puddle/auxiliary/wrap.hpp>
#include <puddle/auxiliary/integer.hpp>
#include <puddle/auxiliary/range.hpp>
#include <puddle/auxiliary/meta_objects.hpp>
#include <puddle/auxiliary/meta_instance.hpp>
#include <mirror/mirror_fwd.hpp>


/** @mainpage Mirror C++ reflection library - Puddle compile-time layer
 *
 *  @image html  puddle.png
 *  @image latex puddle.png
 *
 *  Copyright &copy; 2006-2011 Matus Chochlik.
 *
 *  Distributed under the Boost Software License, Version 1.0.
 *  (See accompanying file LICENSE_1_0.txt or copy at
 *  http://www.boost.org/LICENSE_1_0.txt)
 *
 *  @section puddle_intro Introduction
 *
 *  This is a reference manual generated by @em Doxygen, for the Puddle
 *  compile-time layer, which is part of the Mirror reflection library.
 *
 *  Other resources and documentation for Mirror and the related libraries and utilities
 *  can also be found on the project <A HREF="../../../index.html">home page</A>.
 *
 */

PUDDLE_NAMESPACE_BEGIN

/** @defgroup puddle_reflection Puddle - Reflection expressions
 *
 *  Puddle provides several reflection functions that can
 *  be used for obtaining compile-time meta-objects reflecting
 *  namespaces, types, classes, etc.
 */

template <typename Type>
struct reflected
{
	typedef typename aux::wrap<
		typename mirror::reflected<Type>::type
	>::type type;
};

/// Reflects the @a Type passed as template parameter
/** This function returns an object whose type conforms to the
 *  puddle::MetaType concept, which reflects the type passed
 *  to the function as the template parameter.
 *
 *  @tparam Type the type to be reflected
 *
 *  @see mirror::MetaType
 *  @see puddle::MetaType
 *
 *  @ingroup puddle_reflection
 */
template <typename Type>
typename reflected<Type>::type reflected_type(void)
{
	return typename reflected<Type>::type();
}

/// Wraps a Mirror's meta-object
/** This function wraps a type conforming to one of the Mirror's concepts
 *  and returns an object whose type conforms to a Puddle's concept
 *  corresponding to the @p MirrorMetaObject concept.
 *
 *  @ingroup puddle_reflection
 */
template <typename MirrorMetaObject>
typename aux::wrap<MirrorMetaObject>::type adapt(void)
{
	return typename aux::wrap<MirrorMetaObject>::type();
}

template <class MetaFreeVariable>
inline decltype(aux::meta_free_variable_instance<MetaFreeVariable>())
instance_of(aux::meta_free_variable<MetaFreeVariable> var)
{
	return aux::meta_free_variable_instance<MetaFreeVariable>();
}

PUDDLE_NAMESPACE_END

#endif //include guard

